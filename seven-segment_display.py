# In this example, consider a single digit of a seven-segment display. It has the following structure:
#
#            -----------
#           |     2     |
#           |           |
#           | 1       3 |
#           |           |
#           |     0     |
#            -----------
#           |           |
#           |           |
#           | 6       4 |
#           |           |
#           |     5     |
#            -----------
#
# Here, each of the seven display segments is labeled 0 through 7.
#
# Consider each of the sixteen hexadecimal digits based on which of the seven segments are lit:
#
#        0 = (1,1,1,1,1,1,0)     1 = (0,0,1,1,0,0,0)     2 = (1,1,0,1,1,0,1)     3 = (0,1,1,1,1,0,1)
#         binary: (0,0,0,0)       binary: (0,0,0,1)       binary: (0,0,1,0)       binary: (0,0,1,1)
#
#            -----------                                     -----------             ----------- 
#           |     2     |                 2     |                 2     |                 2     |
#           |           |                       |                       |                       |
#           | 1       3 |             1       3 |             1       3 |             1       3 |
#           |           |                       |                       |                       |
#           |     0     |                 0     |                 0     |                 0     |
#                                                            -----------             ----------- 
#           |           |                       |           |                                   |
#           |           |                       |           |                                   |
#           | 6       4 |             6       4 |           | 6       4               6       4 |
#           |           |                       |           |                                   |
#           |     5     |                 5     |           |     5                       5     |
#            -----------                                     -----------             ----------- 
#
#        4 = (0,0,1,1,0,1,1)     5 = (0,1,1,0,1,1,1)     6 = (1,1,1,0,1,1,1)     7 = (0,0,1,1,1,0,0)
#         binary: (0,1,0,0)       binary: (0,1,0,1)       binary: (0,1,1,0)       binary: (0,1,1,1)
#
#                                    -----------             -----------             ----------- 
#           |     2     |           |     2                 |     2                       2     |
#           |           |           |                       |                                   |
#           | 1       3 |           | 1       3             | 1       3               1       3 |
#           |           |           |                       |                                   |
#           |     0     |           |     0                 |     0                       0     |
#            -----------             -----------             -----------                         
#                       |                       |           |           |                       |
#                       |                       |           |           |                       |
#             6       4 |             6       4 |           | 6       4 |             6       4 |
#                       |                       |           |           |                       |
#                 5     |                 5     |           |     5     |                 5     |
#                                    -----------             -----------                         
#
#        8 = (1,1,1,1,1,1,1)     9 = (0,0,1,1,1,1,1)     A = (1,0,1,1,1,1,1)     B = (1,1,1,0,0,1,1)
#         binary: (1,0,0,0)       binary: (1,0,0,1)       binary: (1,0,1,0)       binary: (1,0,1,1)
#
#            -----------             -----------             -----------                         
#           |     2     |           |     2     |           |     2     |           |     2      
#           |           |           |           |           |           |           |            
#           | 1       3 |           | 1       3 |           | 1       3 |           | 1       3  
#           |           |           |           |           |           |           |            
#           |     0     |           |     0     |           |     0     |           |     0      
#            -----------             -----------             -----------             ----------- 
#           |           |                       |           |           |           |           |
#           |           |                       |           |           |           |           |
#           | 6       4 |             6       4 |           | 6       4 |           | 6       4 |
#           |           |                       |           |           |           |           |
#           |     5     |                 5     |           |     5     |           |     5     |
#            -----------                                                             ----------- 
#
#        C = (1,1,0,0,1,1,0)     D = (1,1,1,1,0,0,1)     E = (1,1,0,0,1,1,1)     F = (1,0,0,0,1,1,1)
#         binary: (1,1,0,0)       binary: (1,1,0,1)       binary: (1,1,1,0)       binary: (1,1,1,1)
#
#            -----------                                     -----------             ----------- 
#           |     2                       2     |           |     2                 |     2      
#           |                                   |           |                       |            
#           | 1       3               1       3 |           | 1       3             | 1       3  
#           |                                   |           |                       |            
#           |     0                       0     |           |     0                 |     0      
#                                    -----------             -----------             ----------- 
#           |                       |           |           |                       |            
#           |                       |           |           |                       |            
#           | 6       4             | 6       4 |           | 6       4             | 6       4  
#           |                       |           |           |                       |            
#           |     5                 |     5     |           |     5                 |     5      
#            -----------             -----------             -----------                         
#
# Each of the sixteen hexadecimal digits therefore has a seven-bit representation based on the seven-segment display.
#
# In this example, we build a feedforward neural network consisting of a 7-unit input layer, three 13-unit hidden layers, and one 5-unit output layer.
# The input is the seven-bit representation of each hexadecimal digit based on which portions of the seven-segment display are activated.
# The four low-order bits of the output are the binary representation of that digit.
# The high-order bit of the output is an indicator to signal if the seven-bit combination represents one of the sixteen hexadecimal digits.
# If this bit is 0, then the seven-bit combination corresponds to one of the hexadecimal digits.
# If this bit is 1, then the seven-bit combination does not correspond to one of the hexadecimal digits, and the low-order output bits are undefined.
#
# We train the network to produce the desired outputs. Its performance is displayed in the program's output.

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
import numpy as np

# Set the seed of the pseudorandom number tenerator
seed = 1
tf.random.set_random_seed(seed)

# There are 2^7=128 input-output pairs
NUM_PAIRS = 128

# Each of the three middle layers has 13 units
MIDDLE_1 = 13
MIDDLE_2 = 13
MIDDLE_3 = 13

# Create placeholders for the inputs and outputs
X = tf.placeholder(dtype=tf.float32, shape=(NUM_PAIRS, 7))
Y = tf.placeholder(dtype=tf.float32, shape=(NUM_PAIRS, 5))
Y_FIT = tf.placeholder(dtype=tf.float32, shape=(NUM_PAIRS, 5))

# Set up the inputs
LIST_INPUT = [[0,0,0,0,0,0,0], # 0x00, ' '
              [0,0,0,0,0,0,1], # 0x01, ' '
              [0,0,0,0,0,1,0], # 0x02, ' '
              [0,0,0,0,0,1,1], # 0x03, ' '
              [0,0,0,0,1,0,0], # 0x04, ' '
              [0,0,0,0,1,0,1], # 0x05, ' '
              [0,0,0,0,1,1,0], # 0x06, ' '
              [0,0,0,0,1,1,1], # 0x07, ' '
              [0,0,0,1,0,0,0], # 0x08, ' '
              [0,0,0,1,0,0,1], # 0x09, ' '
              [0,0,0,1,0,1,0], # 0x0A, ' '
              [0,0,0,1,0,1,1], # 0x0B, ' '
              [0,0,0,1,1,0,0], # 0x0C, ' '
              [0,0,0,1,1,0,1], # 0x0D, ' '
              [0,0,0,1,1,1,0], # 0x0E, ' '
              [0,0,0,1,1,1,1], # 0x0F, ' '
              [0,0,1,0,0,0,0], # 0x10, ' '
              [0,0,1,0,0,0,1], # 0x11, ' '
              [0,0,1,0,0,1,0], # 0x12, ' '
              [0,0,1,0,0,1,1], # 0x13, ' '
              [0,0,1,0,1,0,0], # 0x14, ' '
              [0,0,1,0,1,0,1], # 0x15, ' '
              [0,0,1,0,1,1,0], # 0x16, ' '
              [0,0,1,0,1,1,1], # 0x17, ' '
              [0,0,1,1,0,0,0], # 0x18, '1'
              [0,0,1,1,0,0,1], # 0x19, ' '
              [0,0,1,1,0,1,0], # 0x1A, ' '
              [0,0,1,1,0,1,1], # 0x1B, '4'
              [0,0,1,1,1,0,0], # 0x1C, '7'
              [0,0,1,1,1,0,1], # 0x1D, ' '
              [0,0,1,1,1,1,0], # 0x1E, ' '
              [0,0,1,1,1,1,1], # 0x1F, '9'
              [0,1,0,0,0,0,0], # 0x20, ' '
              [0,1,0,0,0,0,1], # 0x21, ' '
              [0,1,0,0,0,1,0], # 0x22, ' '
              [0,1,0,0,0,1,1], # 0x23, ' '
              [0,1,0,0,1,0,0], # 0x24, ' '
              [0,1,0,0,1,0,1], # 0x25, ' '
              [0,1,0,0,1,1,0], # 0x26, ' '
              [0,1,0,0,1,1,1], # 0x27, ' '
              [0,1,0,1,0,0,0], # 0x28, ' '
              [0,1,0,1,0,0,1], # 0x29, ' '
              [0,1,0,1,0,1,0], # 0x2A, ' '
              [0,1,0,1,0,1,1], # 0x2B, ' '
              [0,1,0,1,1,0,0], # 0x2C, ' '
              [0,1,0,1,1,0,1], # 0x2D, ' '
              [0,1,0,1,1,1,0], # 0x2E, ' '
              [0,1,0,1,1,1,1], # 0x2F, ' '
              [0,1,1,0,0,0,0], # 0x30, ' '
              [0,1,1,0,0,0,1], # 0x31, ' '
              [0,1,1,0,0,1,0], # 0x32, ' '
              [0,1,1,0,0,1,1], # 0x33, ' '
              [0,1,1,0,1,0,0], # 0x34, ' '
              [0,1,1,0,1,0,1], # 0x35, ' '
              [0,1,1,0,1,1,0], # 0x36, ' '
              [0,1,1,0,1,1,1], # 0x37, '5'
              [0,1,1,1,0,0,0], # 0x38, ' '
              [0,1,1,1,0,0,1], # 0x39, ' '
              [0,1,1,1,0,1,0], # 0x3A, ' '
              [0,1,1,1,0,1,1], # 0x3B, ' '
              [0,1,1,1,1,0,0], # 0x3C, ' '
              [0,1,1,1,1,0,1], # 0x3D, '3'
              [0,1,1,1,1,1,0], # 0x3E, ' '
              [0,1,1,1,1,1,1], # 0x3F, ' '
              [1,0,0,0,0,0,0], # 0x40, ' '
              [1,0,0,0,0,0,1], # 0x41, ' '
              [1,0,0,0,0,1,0], # 0x42, ' '
              [1,0,0,0,0,1,1], # 0x43, ' '
              [1,0,0,0,1,0,0], # 0x44, ' '
              [1,0,0,0,1,0,1], # 0x45, ' '
              [1,0,0,0,1,1,0], # 0x46, ' '
              [1,0,0,0,1,1,1], # 0x47, 'F'
              [1,0,0,1,0,0,0], # 0x48, ' '
              [1,0,0,1,0,0,1], # 0x49, ' '
              [1,0,0,1,0,1,0], # 0x4A, ' '
              [1,0,0,1,0,1,1], # 0x4B, ' '
              [1,0,0,1,1,0,0], # 0x4C, ' '
              [1,0,0,1,1,0,1], # 0x4D, ' '
              [1,0,0,1,1,1,0], # 0x4E, ' '
              [1,0,0,1,1,1,1], # 0x4F, ' '
              [1,0,1,0,0,0,0], # 0x50, ' '
              [1,0,1,0,0,0,1], # 0x51, ' '
              [1,0,1,0,0,1,0], # 0x52, ' '
              [1,0,1,0,0,1,1], # 0x53, ' '
              [1,0,1,0,1,0,0], # 0x54, ' '
              [1,0,1,0,1,0,1], # 0x55, ' '
              [1,0,1,0,1,1,0], # 0x56, ' '
              [1,0,1,0,1,1,1], # 0x57, ' '
              [1,0,1,1,0,0,0], # 0x58, ' '
              [1,0,1,1,0,0,1], # 0x59, ' '
              [1,0,1,1,0,1,0], # 0x5A, ' '
              [1,0,1,1,0,1,1], # 0x5B, ' '
              [1,0,1,1,1,0,0], # 0x5C, ' '
              [1,0,1,1,1,0,1], # 0x5D, ' '
              [1,0,1,1,1,1,0], # 0x5E, ' '
              [1,0,1,1,1,1,1], # 0x5F, 'A'
              [1,1,0,0,0,0,0], # 0x60, ' '
              [1,1,0,0,0,0,1], # 0x61, ' '
              [1,1,0,0,0,1,0], # 0x62, ' '
              [1,1,0,0,0,1,1], # 0x63, ' '
              [1,1,0,0,1,0,0], # 0x64, ' '
              [1,1,0,0,1,0,1], # 0x65, ' '
              [1,1,0,0,1,1,0], # 0x66, 'C'
              [1,1,0,0,1,1,1], # 0x67, 'E'
              [1,1,0,1,0,0,0], # 0x68, ' '
              [1,1,0,1,0,0,1], # 0x69, ' '
              [1,1,0,1,0,1,0], # 0x6A, ' '
              [1,1,0,1,0,1,1], # 0x6B, ' '
              [1,1,0,1,1,0,0], # 0x6C, ' '
              [1,1,0,1,1,0,1], # 0x6D, '2'
              [1,1,0,1,1,1,0], # 0x6E, ' '
              [1,1,0,1,1,1,1], # 0x6F, ' '
              [1,1,1,0,0,0,0], # 0x70, ' '
              [1,1,1,0,0,0,1], # 0x71, ' '
              [1,1,1,0,0,1,0], # 0x72, ' '
              [1,1,1,0,0,1,1], # 0x73, 'B'
              [1,1,1,0,1,0,0], # 0x74, ' '
              [1,1,1,0,1,0,1], # 0x75, ' '
              [1,1,1,0,1,1,0], # 0x76, ' '
              [1,1,1,0,1,1,1], # 0x77, '6'
              [1,1,1,1,0,0,0], # 0x78, ' '
              [1,1,1,1,0,0,1], # 0x79, 'D'
              [1,1,1,1,0,1,0], # 0x7A, ' '
              [1,1,1,1,0,1,1], # 0x7B, ' '
              [1,1,1,1,1,0,0], # 0x7C, ' '
              [1,1,1,1,1,0,1], # 0x7D, ' '
              [1,1,1,1,1,1,0], # 0x7E, '0'
              [1,1,1,1,1,1,1]] # 0x7F, '8'

# Set up the outputs
LIST_OUTPUT = [[1,0,0,0,0], # 0x00, ' '
               [1,0,0,0,0], # 0x01, ' '
               [1,0,0,0,0], # 0x02, ' '
               [1,0,0,0,0], # 0x03, ' '
               [1,0,0,0,0], # 0x04, ' '
               [1,0,0,0,0], # 0x05, ' '
               [1,0,0,0,0], # 0x06, ' '
               [1,0,0,0,0], # 0x07, ' '
               [1,0,0,0,0], # 0x08, ' '
               [1,0,0,0,0], # 0x09, ' '
               [1,0,0,0,0], # 0x0A, ' '
               [1,0,0,0,0], # 0x0B, ' '
               [1,0,0,0,0], # 0x0C, ' '
               [1,0,0,0,0], # 0x0D, ' '
               [1,0,0,0,0], # 0x0E, ' '
               [1,0,0,0,0], # 0x0F, ' '
               [1,0,0,0,0], # 0x10, ' '
               [1,0,0,0,0], # 0x11, ' '
               [1,0,0,0,0], # 0x12, ' '
               [1,0,0,0,0], # 0x13, ' '
               [1,0,0,0,0], # 0x14, ' '
               [1,0,0,0,0], # 0x15, ' '
               [1,0,0,0,0], # 0x16, ' '
               [1,0,0,0,0], # 0x17, ' '
               [0,0,0,0,1], # 0x18, '1'
               [1,0,0,0,0], # 0x19, ' '
               [1,0,0,0,0], # 0x1A, ' '
               [0,0,1,0,0], # 0x1B, '4'
               [0,0,1,1,1], # 0x1C, '7'
               [1,0,0,0,0], # 0x1D, ' '
               [1,0,0,0,0], # 0x1E, ' '
               [0,1,0,0,1], # 0x1F, '9'
               [1,0,0,0,0], # 0x20, ' '
               [1,0,0,0,0], # 0x21, ' '
               [1,0,0,0,0], # 0x22, ' '
               [1,0,0,0,0], # 0x23, ' '
               [1,0,0,0,0], # 0x24, ' '
               [1,0,0,0,0], # 0x25, ' '
               [1,0,0,0,0], # 0x26, ' '
               [1,0,0,0,0], # 0x27, ' '
               [1,0,0,0,0], # 0x28, ' '
               [1,0,0,0,0], # 0x29, ' '
               [1,0,0,0,0], # 0x2A, ' '
               [1,0,0,0,0], # 0x2B, ' '
               [1,0,0,0,0], # 0x2C, ' '
               [1,0,0,0,0], # 0x2D, ' '
               [1,0,0,0,0], # 0x2E, ' '
               [1,0,0,0,0], # 0x2F, ' '
               [1,0,0,0,0], # 0x30, ' '
               [1,0,0,0,0], # 0x31, ' '
               [1,0,0,0,0], # 0x32, ' '
               [1,0,0,0,0], # 0x33, ' '
               [1,0,0,0,0], # 0x34, ' '
               [1,0,0,0,0], # 0x35, ' '
               [1,0,0,0,0], # 0x36, ' '
               [0,0,1,0,1], # 0x37, '5'
               [1,0,0,0,0], # 0x38, ' '
               [1,0,0,0,0], # 0x39, ' '
               [1,0,0,0,0], # 0x3A, ' '
               [1,0,0,0,0], # 0x3B, ' '
               [1,0,0,0,0], # 0x3C, ' '
               [0,0,0,1,1], # 0x3D, '3'
               [1,0,0,0,0], # 0x3E, ' '
               [1,0,0,0,0], # 0x3F, ' '
               [1,0,0,0,0], # 0x40, ' '
               [1,0,0,0,0], # 0x41, ' '
               [1,0,0,0,0], # 0x42, ' '
               [1,0,0,0,0], # 0x43, ' '
               [1,0,0,0,0], # 0x44, ' '
               [1,0,0,0,0], # 0x45, ' '
               [1,0,0,0,0], # 0x46, ' '
               [0,1,1,1,1], # 0x47, 'F'
               [1,0,0,0,0], # 0x48, ' '
               [1,0,0,0,0], # 0x49, ' '
               [1,0,0,0,0], # 0x4A, ' '
               [1,0,0,0,0], # 0x4B, ' '
               [1,0,0,0,0], # 0x4C, ' '
               [1,0,0,0,0], # 0x4D, ' '
               [1,0,0,0,0], # 0x4E, ' '
               [1,0,0,0,0], # 0x4F, ' '
               [1,0,0,0,0], # 0x50, ' '
               [1,0,0,0,0], # 0x51, ' '
               [1,0,0,0,0], # 0x52, ' '
               [1,0,0,0,0], # 0x53, ' '
               [1,0,0,0,0], # 0x54, ' '
               [1,0,0,0,0], # 0x55, ' '
               [1,0,0,0,0], # 0x56, ' '
               [1,0,0,0,0], # 0x57, ' '
               [1,0,0,0,0], # 0x58, ' '
               [1,0,0,0,0], # 0x59, ' '
               [1,0,0,0,0], # 0x5A, ' '
               [1,0,0,0,0], # 0x5B, ' '
               [1,0,0,0,0], # 0x5C, ' '
               [1,0,0,0,0], # 0x5D, ' '
               [1,0,0,0,0], # 0x5E, ' '
               [0,1,0,1,0], # 0x5F, 'A'
               [1,0,0,0,0], # 0x60, ' '
               [1,0,0,0,0], # 0x61, ' '
               [1,0,0,0,0], # 0x62, ' '
               [1,0,0,0,0], # 0x63, ' '
               [1,0,0,0,0], # 0x64, ' '
               [1,0,0,0,0], # 0x65, ' '
               [0,1,1,0,0], # 0x66, 'C'
               [0,1,1,1,0], # 0x67, 'E'
               [1,0,0,0,0], # 0x68, ' '
               [1,0,0,0,0], # 0x69, ' '
               [1,0,0,0,0], # 0x6A, ' '
               [1,0,0,0,0], # 0x6B, ' '
               [1,0,0,0,0], # 0x6C, ' '
               [0,0,0,1,0], # 0x6D, '2'
               [1,0,0,0,0], # 0x6E, ' '
               [1,0,0,0,0], # 0x6F, ' '
               [1,0,0,0,0], # 0x70, ' '
               [1,0,0,0,0], # 0x71, ' '
               [1,0,0,0,0], # 0x72, ' '
               [0,1,0,1,1], # 0x73, 'B'
               [1,0,0,0,0], # 0x74, ' '
               [1,0,0,0,0], # 0x75, ' '
               [1,0,0,0,0], # 0x76, ' '
               [0,0,1,1,0], # 0x77, '6'
               [1,0,0,0,0], # 0x78, ' '
               [0,1,1,0,1], # 0x79, 'D'
               [1,0,0,0,0], # 0x7A, ' '
               [1,0,0,0,0], # 0x7B, ' '
               [1,0,0,0,0], # 0x7C, ' '
               [1,0,0,0,0], # 0x7D, ' '
               [0,0,0,0,0], # 0x7E, '0'
               [0,1,0,0,0]] # 0x7F, '8'

# Only train on the last four bits if the corresponding input represents a hexadecimal digit
LIST_OUTPUT_FIT = [[1,0,0,0,0], # 0x00, ' '
                   [1,0,0,0,0], # 0x01, ' '
                   [1,0,0,0,0], # 0x02, ' '
                   [1,0,0,0,0], # 0x03, ' '
                   [1,0,0,0,0], # 0x04, ' '
                   [1,0,0,0,0], # 0x05, ' '
                   [1,0,0,0,0], # 0x06, ' '
                   [1,0,0,0,0], # 0x07, ' '
                   [1,0,0,0,0], # 0x08, ' '
                   [1,0,0,0,0], # 0x09, ' '
                   [1,0,0,0,0], # 0x0A, ' '
                   [1,0,0,0,0], # 0x0B, ' '
                   [1,0,0,0,0], # 0x0C, ' '
                   [1,0,0,0,0], # 0x0D, ' '
                   [1,0,0,0,0], # 0x0E, ' '
                   [1,0,0,0,0], # 0x0F, ' '
                   [1,0,0,0,0], # 0x10, ' '
                   [1,0,0,0,0], # 0x11, ' '
                   [1,0,0,0,0], # 0x12, ' '
                   [1,0,0,0,0], # 0x13, ' '
                   [1,0,0,0,0], # 0x14, ' '
                   [1,0,0,0,0], # 0x15, ' '
                   [1,0,0,0,0], # 0x16, ' '
                   [1,0,0,0,0], # 0x17, ' '
                   [1,1,1,1,1], # 0x18, '1'
                   [1,0,0,0,0], # 0x19, ' '
                   [1,0,0,0,0], # 0x1A, ' '
                   [1,1,1,1,1], # 0x1B, '4'
                   [1,1,1,1,1], # 0x1C, '7'
                   [1,0,0,0,0], # 0x1D, ' '
                   [1,0,0,0,0], # 0x1E, ' '
                   [1,1,1,1,1], # 0x1F, '9'
                   [1,0,0,0,0], # 0x20, ' '
                   [1,0,0,0,0], # 0x21, ' '
                   [1,0,0,0,0], # 0x22, ' '
                   [1,0,0,0,0], # 0x23, ' '
                   [1,0,0,0,0], # 0x24, ' '
                   [1,0,0,0,0], # 0x25, ' '
                   [1,0,0,0,0], # 0x26, ' '
                   [1,0,0,0,0], # 0x27, ' '
                   [1,0,0,0,0], # 0x28, ' '
                   [1,0,0,0,0], # 0x29, ' '
                   [1,0,0,0,0], # 0x2A, ' '
                   [1,0,0,0,0], # 0x2B, ' '
                   [1,0,0,0,0], # 0x2C, ' '
                   [1,0,0,0,0], # 0x2D, ' '
                   [1,0,0,0,0], # 0x2E, ' '
                   [1,0,0,0,0], # 0x2F, ' '
                   [1,0,0,0,0], # 0x30, ' '
                   [1,0,0,0,0], # 0x31, ' '
                   [1,0,0,0,0], # 0x32, ' '
                   [1,0,0,0,0], # 0x33, ' '
                   [1,0,0,0,0], # 0x34, ' '
                   [1,0,0,0,0], # 0x35, ' '
                   [1,0,0,0,0], # 0x36, ' '
                   [1,1,1,1,1], # 0x37, '5'
                   [1,0,0,0,0], # 0x38, ' '
                   [1,0,0,0,0], # 0x39, ' '
                   [1,0,0,0,0], # 0x3A, ' '
                   [1,0,0,0,0], # 0x3B, ' '
                   [1,0,0,0,0], # 0x3C, ' '
                   [1,1,1,1,1], # 0x3D, '3'
                   [1,0,0,0,0], # 0x3E, ' '
                   [1,0,0,0,0], # 0x3F, ' '
                   [1,0,0,0,0], # 0x40, ' '
                   [1,0,0,0,0], # 0x41, ' '
                   [1,0,0,0,0], # 0x42, ' '
                   [1,0,0,0,0], # 0x43, ' '
                   [1,0,0,0,0], # 0x44, ' '
                   [1,0,0,0,0], # 0x45, ' '
                   [1,0,0,0,0], # 0x46, ' '
                   [1,1,1,1,1], # 0x47, 'F'
                   [1,0,0,0,0], # 0x48, ' '
                   [1,0,0,0,0], # 0x49, ' '
                   [1,0,0,0,0], # 0x4A, ' '
                   [1,0,0,0,0], # 0x4B, ' '
                   [1,0,0,0,0], # 0x4C, ' '
                   [1,0,0,0,0], # 0x4D, ' '
                   [1,0,0,0,0], # 0x4E, ' '
                   [1,0,0,0,0], # 0x4F, ' '
                   [1,0,0,0,0], # 0x50, ' '
                   [1,0,0,0,0], # 0x51, ' '
                   [1,0,0,0,0], # 0x52, ' '
                   [1,0,0,0,0], # 0x53, ' '
                   [1,0,0,0,0], # 0x54, ' '
                   [1,0,0,0,0], # 0x55, ' '
                   [1,0,0,0,0], # 0x56, ' '
                   [1,0,0,0,0], # 0x57, ' '
                   [1,0,0,0,0], # 0x58, ' '
                   [1,0,0,0,0], # 0x59, ' '
                   [1,0,0,0,0], # 0x5A, ' '
                   [1,0,0,0,0], # 0x5B, ' '
                   [1,0,0,0,0], # 0x5C, ' '
                   [1,0,0,0,0], # 0x5D, ' '
                   [1,0,0,0,0], # 0x5E, ' '
                   [1,1,1,1,1], # 0x5F, 'A'
                   [1,0,0,0,0], # 0x60, ' '
                   [1,0,0,0,0], # 0x61, ' '
                   [1,0,0,0,0], # 0x62, ' '
                   [1,0,0,0,0], # 0x63, ' '
                   [1,0,0,0,0], # 0x64, ' '
                   [1,0,0,0,0], # 0x65, ' '
                   [1,1,1,1,1], # 0x66, 'C'
                   [1,1,1,1,1], # 0x67, 'E'
                   [1,0,0,0,0], # 0x68, ' '
                   [1,0,0,0,0], # 0x69, ' '
                   [1,0,0,0,0], # 0x6A, ' '
                   [1,0,0,0,0], # 0x6B, ' '
                   [1,0,0,0,0], # 0x6C, ' '
                   [1,1,1,1,1], # 0x6D, '2'
                   [1,0,0,0,0], # 0x6E, ' '
                   [1,0,0,0,0], # 0x6F, ' '
                   [1,0,0,0,0], # 0x70, ' '
                   [1,0,0,0,0], # 0x71, ' '
                   [1,0,0,0,0], # 0x72, ' '
                   [1,1,1,1,1], # 0x73, 'B'
                   [1,0,0,0,0], # 0x74, ' '
                   [1,0,0,0,0], # 0x75, ' '
                   [1,0,0,0,0], # 0x76, ' '
                   [1,1,1,1,1], # 0x77, '6'
                   [1,0,0,0,0], # 0x78, ' '
                   [1,1,1,1,1], # 0x79, 'D'
                   [1,0,0,0,0], # 0x7A, ' '
                   [1,0,0,0,0], # 0x7B, ' '
                   [1,0,0,0,0], # 0x7C, ' '
                   [1,0,0,0,0], # 0x7D, ' '
                   [1,1,1,1,1], # 0x7E, '0'
                   [1,1,1,1,1]] # 0x7F, '8'

# Set the learning rate
learning_rate = 0.001

# Set the number of epochs
N = 10000

# Set up the first hidden layer
with tf.variable_scope('hidden1'):
  
    # Randomize the weights and biases
    h_w = tf.Variable(2*tf.random.uniform([7, MIDDLE_1])-1, name='weights')
    h_b = tf.Variable(2*tf.random.uniform([NUM_PAIRS, MIDDLE_1])-1, name='biases')
    
    # Calculate the values of the units
    h = tf.nn.relu(tf.matmul(X, h_w) + h_b)

# Set up the second hidden layer
with tf.variable_scope('hidden2'):
  
    # Randomize the weights and biases
    h2_w = tf.Variable(2*tf.random.uniform([MIDDLE_1, MIDDLE_2])-1, name='weights')
    h2_b = tf.Variable(2*tf.random.uniform([NUM_PAIRS, MIDDLE_2])-1, name='biases')
    
    # Calculate the values of the units
    h2 = tf.nn.relu(tf.matmul(h, h2_w) + h2_b)

# Set up the third hidden layer
with tf.variable_scope('hidden3'):
  
    # Randomize the weights and biases
    h3_w = tf.Variable(2*tf.random.uniform([MIDDLE_2, MIDDLE_3])-1, name='weights')
    h3_b = tf.Variable(2*tf.random.uniform([NUM_PAIRS, MIDDLE_3])-1, name='biases')
    
    # Calculate the values of the units
    h3 = tf.nn.relu(tf.matmul(h2, h3_w) + h3_b)

# Set up the output layer
with tf.variable_scope('output'):
      
    # Randomize the weights and biases
    o_w = tf.Variable(2*tf.random.uniform([MIDDLE_3, 5])-1, name='weights')
    o_b = tf.Variable(2*tf.random.uniform([NUM_PAIRS, 5])-1, name='biases')
    
    # Calculate the values of the units
    Y_estimation = tf.nn.sigmoid(tf.matmul(h3, o_w) + o_b)

# Set up the loss function
with tf.variable_scope('cost'):
  
    # Calculate the average cost
    cost = tf.reduce_mean(tf.squared_difference(tf.math.multiply(Y_estimation,Y_FIT), tf.math.multiply(Y,Y_FIT)))

# Set up the training variable
with tf.variable_scope('train'):
  
    # Train using the Adam optimizer
    train = tf.train.AdamOptimizer(learning_rate).minimize(cost)

# Start the TensorFlow session
with tf.Session() as session:
  
    # Initialize the session
    session.run(tf.global_variables_initializer())
    
    for epoch in range(N):
      
        # Train the model
        session.run(train, feed_dict={X: LIST_INPUT, Y:LIST_OUTPUT, Y_FIT:LIST_OUTPUT_FIT})

        if epoch % (N/10) == 0:
            # Print the epoch and the average loss
            loss = session.run(cost, feed_dict={X: LIST_INPUT, Y:LIST_OUTPUT, Y_FIT:LIST_OUTPUT_FIT})
            print("epoch = {0}, average loss = {1}".format(epoch, loss))

    # Print the outputs
    Y_test = session.run(Y_estimation, feed_dict={X:LIST_INPUT})
    print(np.round(Y_test, decimals=3))
